# -*- coding: utf-8 -*-
"""MS Predict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ysQNr1Mn0kagVXOdrbq-w-0ta2fFaEAy
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


data=pd.read_csv('/content/drive/My Drive/Admission_Predict_Ver1.1.csv', low_memory=False)
data['Chance of Admit '] = np.where(data['Chance of Admit ']>0.6,1,0)
print(data.head(5))

data.drop(['Serial No.'],axis=1,inplace=True)
print("Before Drop")
sns.heatmap(data.corr(),annot=True,linewidths=0.20,fmt = '.2f',cmap='magma')
plt.show()
data.drop(['SOP'],axis=1,inplace=True)
data.drop(['LOR '],axis=1,inplace=True)
print("After Drop")
sns.heatmap(data.corr(),annot=True,linewidths=0.20,fmt = '.2f',cmap='magma')
plt.show()

print(data.isnull().sum())

print(data.info())

sns.pairplot(data)
plt.show()

from sklearn.model_selection import train_test_split

y = data['Chance of Admit ']
X = data.iloc[:,:5].values

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.1,shuffle=False)

from sklearn.tree import DecisionTreeClassifier
DTC= DecisionTreeClassifier(random_state = 0)
DTC.fit(X_train,y_train)
y_p2=DTC.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p2)
print("Accuracy using Decision Tree Classifier: %f"%acc)

from sklearn.linear_model import LogisticRegression
Log = LogisticRegression()
Log.fit(X_train,y_train)
y_p1=Log.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p1)
print("Accuracy using Logistic Regresssion: %f"%acc)

from sklearn.neighbors import KNeighborsClassifier
KNN1= KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
KNN1.fit(X_train,y_train)
y_p4=KNN1.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p4)
print("Accuracy using KNeighbors Classifiers: %f"%acc)

import pickle
path = "/content/drive/My Drive/classifier.h5" 
filename = 'finalized_model.h5'
pickle.dump(Log, open(filename, 'wb'))